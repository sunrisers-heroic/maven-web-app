pipeline {
    agent any

    environment {
        // Use kubeconfig for kubectl access
        KUBECONFIG_CRED = credentials('kubeconfig-credentials')

        // Use Docker Hub credential
        DOCKER_USER = credentials('docker-hub-credentials').getUsername()
        DOCKER_PASS = credentials('docker-hub-credentials').getPassword()
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/yourname/yourrepo.git' 
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                                                  passwordVariable: 'DOCKER_PASS',
                                                  usernameVariable: 'DOCKER_USER')]) {
                    sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                sh 'docker pull sunrisersheroic/maven-web-app:latest'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        // Try using kubeconfig first (recommended)
                        echo "Attempting to deploy using kubeconfig..."
                        withKubeConfig([credentialsId: 'kubeconfig-credentials']) {
                            sh """
                                kubectl apply -f k8s/deployment.yaml
                                kubectl apply -f k8s/service.yaml
                                kubectl rollout status deployment/maven-web-app --timeout=60s
                                kubectl get pods,svc
                            """
                        }
                    } catch (Exception e) {
                        echo "kubeconfig method failed: ${e}. Falling back to SSH..."

                        // Fallback: SSH into Kubernetes master node
                        sshagent(['k8s-master-ssh']) {
                            sh '''
                                ssh -o StrictHostKeyChecking=no ubuntu@34.226.120.72 << 'ENDSSH'
                                    cd /home/ubuntu || exit
                                    echo "Copying deployment files..."
                                    cp ~/jenkins-workspace/workspace/your-pipeline-name/k8s/* ./

                                    echo "Applying Kubernetes manifests..."
                                    kubectl apply -f deployment.yaml
                                    kubectl apply -f service.yaml
                                    kubectl rollout status deployment/maven-web-app --timeout=60s
                                    kubectl get pods,svc
                                ENDSSH
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful!"
            slackSend channel: '#deployments', color: '#00FF00', message: "Deployment to Kubernetes succeeded!"
        }
        failure {
            echo "❌ Deployment failed!"
            slackSend channel: '#deployments', color: '#FF0000', message: "Deployment to Kubernetes failed!"
        }
    }
}
