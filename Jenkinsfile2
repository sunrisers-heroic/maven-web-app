pipeline {
    agent any

    environment {
        // Docker image
        DOCKER_IMAGE_NAME = "sunrisersheroic/maven-web-app"
        BUILD_VERSION = sh(
            script: 'cd maven-web-app && grep -m1 "<version>.*</version>" pom.xml | sed -E "s/.*<version>(.*)<\\/version>.*/\\1/"',
            returnStdout: true
        ).trim()

        // Kubernetes namespace
        K8S_NAMESPACE = "default"
    }

    stages {
        // ... previous stages (Maven, Docker, etc.)

        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying to Kubernetes cluster..."
                script {
                    // Ensure we have a version
                    env.BUILD_VERSION = BUILD_VERSION ?: "latest"
                }

                // Inject kubeconfig from Jenkins credentials
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_PATH')]) {
                    sh '''
                        # Set up kubeconfig
                        mkdir -p ~/.kube
                        cp $KUBECONFIG_PATH ~/.kube/config
                        chmod 600 ~/.kube/config
                        
                        # Verify access
                        kubectl version
                        kubectl get nodes
                        
                        # Deploy to Kubernetes
                        cd maven-web-app
                        
                        # Create or update deployment
                        cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maven-web-app
  namespace: ${K8S_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: maven-web-app
  template:
    metadata:
      labels:
        app: maven-web-app
    spec:
      containers:
      - name: maven-web-app
        image: ${DOCKER_IMAGE_NAME}:${BUILD_VERSION}
        ports:
        - containerPort: 8090
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
EOF

                        # Create or update service
                        cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: maven-web-app-service
  namespace: ${K8S_NAMESPACE}
spec:
  type: LoadBalancer
  selector:
    app: maven-web-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8090
EOF

                        echo "✅ Deployment and Service applied to namespace: ${K8S_NAMESPACE}"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "🚀 Application deployed to remote Kubernetes cluster!"
        }
        failure {
            echo "❌ Deployment failed. Check kubectl logs or Jenkins console."
        }
    }
}
