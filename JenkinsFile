pipeline {
    agent any

    environment {
        GIT_COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        APP_NAME = "maven-web-app"
        IMAGE_NAME = "${APP_NAME}:${GIT_COMMIT}"
        NEXUS_REGISTRY = "nexus.yourcompany.com:5000"
        DOCKER_IMAGE = "${NEXUS_REGISTRY}/${APP_NAME}"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main',
                     url: 'https://github.com/sunrisers-heroic/maven-web-app.git' 
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: "M3", type: "maven"
                    sh "${mavenHome}/bin/mvn clean package"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('MySonarServer') {
                        sh '''
                            mvn sonar:sonar \
                              -Dsonar.login=$SONAR_TOKEN \
                              -Dsonar.host.url=http://<sonar-ip>:9000
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE} .
                """
            }
        }

        stage('Push to Nexus Docker Registry') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'nexus-docker-hub',
                    usernameVariable: 'NEXUS_USER',
                    passwordVariable: 'NEXUS_PASS'
                )]) {
                    sh '''
                        docker login $NEXUS_REGISTRY -u $NEXUS_USER -p $NEXUS_PASS
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh '''
                        cd k8s
                        sed -i "s|image: maven-web-app:.*|image: ${DOCKER_IMAGE}|g" deployment.yaml
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                    '''
                }
            }
        }
    }
}
